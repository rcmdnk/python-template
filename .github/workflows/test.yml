---
name: test

on:
  push:
    branches-ignore:
      - "coverage"
  pull_request:

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Check is main
        id: isMain
        continue-on-error: true
        run: test "${{ github.ref }}" == "refs/heads/main"  && test "${{ matrix.os }}" == "ubuntu-latest"  && test "${{ matrix.python-version }}" == "3.10"
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python-version}}
      - name: Cache Packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }} }}
      - name: Install poetry
        run: pip install poetry
      - name: Poetry setup
        run: poetry install
      - name: Run test
        id: pytest
        continue-on-error: true
        run: poetry run pytest --durations=0 --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=src  tests/ | tee pytest-coverage.txt
      - name: pre-commit
        id: preCommit
        continue-on-error: true
        run: poetry run pre-commit run -a
      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          hide-comment: true
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml
      - name: Check the output coverage
        run: |
          echo "Coverage Percantage - ${{ steps.coverageComment.outputs.coverage }}"
          echo "Coverage Color - ${{ steps.coverageComment.outputs.color }}"
          echo "Coverage Warnings - ${{ steps.coverageComment.outputs.warnings }}"
          echo "Coverage Errors - ${{ steps.coverageComment.outputs.errors }}"
          echo "Coverage Failures - ${{ steps.coverageComment.outputs.failures }}"
          echo "Coverage Skipped - ${{ steps.coverageComment.outputs.skipped }}"
          echo "Coverage Tests - ${{ steps.coverageComment.outputs.tests }}"
          echo "Coverage Time - ${{ steps.coverageComment.outputs.time }}"
          echo "Not Success Test Info - ${{ steps.coverageComment.outputs.notSuccessTestInfo }}"
      - name: Update Readme in coverage branch with Coverage Html and commit to coverage branch
        if: ${{ steps.isMain.outcome == 'success' }}
        run: |
          coverage=$(git branch -a|grep "remotes/origin/coverage$") || :
          if [ -z "$coverage" ];then
            git checkout --orphan coverage
            git rm -rf .
          else
            git checkout coverage
          fi
          echo "[![test](https://github.com/${GITHUB_REPOSITORY}/actions/workflows/test.yml/badge.svg)](https://github.com/${GITHUB_REPOSITORY}/actions/workflows/test.yml)" > ./README.md
          echo -e ${{ steps.coverageComment.outputs.summaryReport }} >> ./README.md
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add README.md
          PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m "Update coverage"
      - name: Push
        if: ${{ steps.isMain.outcome == 'success' }}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: coverage
      - name: Check tests
        run: |
          ((${{ steps.coverageComment.outputs.failures }} == 0)) && ((${{ steps.coverageComment.outputs.errors }} == 0)) || echo 'Test failed!'
          test ${{ steps.preCommit.outcome }} == "success" || echo 'Need to fix by following pre-commit!'
          ((${{ steps.coverageComment.outputs.failures }} == 0)) && ((${{ steps.coverageComment.outputs.errors }} == 0)) && test ${{ steps.preCommit.outcome }} == "success"
