---
name: template_test

on:
  push:
    branches-ignore:
      - "coverage"
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  template_test:
    strategy:
      matrix:
        project_manager: ["uv", "poetry"]
        os: [ubuntu-latest]
        python-version: ["3.12"]
        cli: ["no", "yes"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: setup
        run: |
          version=$(grep ^version pyproject.toml)
          sed -i "s/PROJECT_MANAGER=\"uv\"/PROJECT_MANAGER=\"${{ matrix.project_manager }}\"/" setup.sh
          sed -i "s/CLI=\"no\"/CLI=\"${{ matrix.cli }}\"/" setup.sh
          ./setup.sh
          sed -i "s/^version.*/$version/" pyproject.toml
      - uses: actions/setup-python@v5
        with:
          python-version: ${{matrix.python-version}}
      - name: Install project manager
        run: pip install ${{ matrix.project_manager }}
      - name: uv setup
        if: matrix.project_manager == 'uv'
        run: uv sync
      - name: poetry setup
        if: matrix.project_manager == 'poetry'
        run: poetry install
      - name: Run test
        id: pytest
        continue-on-error: true
        run: ${{matrix.project_manager}} run pytest --durations=0 --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=src  tests/ | tee pytest-coverage.txt
      - name: pre-commit
        id: preCommit
        continue-on-error: true
        run: ${{matrix.project_manager}} run pre-commit run -a
      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          hide-comment: true
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml
      - name: Check the output coverage
        run: |
          echo "Coverage Percantage - ${{ steps.coverageComment.outputs.coverage }}"
          echo "Coverage Color - ${{ steps.coverageComment.outputs.color }}"
          echo "Coverage Warnings - ${{ steps.coverageComment.outputs.warnings }}"
          echo "Coverage Errors - ${{ steps.coverageComment.outputs.errors }}"
          echo "Coverage Failures - ${{ steps.coverageComment.outputs.failures }}"
          echo "Coverage Skipped - ${{ steps.coverageComment.outputs.skipped }}"
          echo "Coverage Tests - ${{ steps.coverageComment.outputs.tests }}"
          echo "Coverage Time - ${{ steps.coverageComment.outputs.time }}"
          echo "Not Success Test Info - ${{ steps.coverageComment.outputs.notSuccessTestInfo }}"
      - name: Check tests
        run: |
          ((${{ steps.coverageComment.outputs.failures }} == 0)) && ((${{ steps.coverageComment.outputs.errors }} == 0)) || echo 'Test failed!'
          test ${{ steps.preCommit.outcome }} == "success" || echo 'Need to fix by following pre-commit!'
          ((${{ steps.coverageComment.outputs.failures }} == 0)) && ((${{ steps.coverageComment.outputs.errors }} == 0)) && test ${{ steps.preCommit.outcome }} == "success"
